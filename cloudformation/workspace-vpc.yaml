
Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets and peers the VPC with the VPC passed in.


Mappings:
  RegionSettings:
    us-east-1:
      EnvironmentName: WorkspaceInfrastructure
      VpcCIDR: 10.196.0.0/16
      PublicSubnet1CIDR: 10.196.10.0/24
      PublicSubnet2CIDR: 10.196.11.0/24
      PrivateSubnet1CIDR: 10.196.20.0/24
      PrivateSubnet2CIDR: 10.196.21.0/24
      AZ1: us-east-1c
      AZ2: us-east-1d
    us-west-2:
      EnvironmentName: WorkspaceInfrastructure
      VpcCIDR: 10.198.0.0/16
      PublicSubnet1CIDR: 10.198.10.0/24
      PublicSubnet2CIDR: 10.198.11.0/24
      PrivateSubnet1CIDR: 10.198.20.0/24
      PrivateSubnet2CIDR: 10.198.21.0/24
      AZ1: us-west-2a
      AZ2: us-west-2b

Parameters:
  ADStackName:
    Type: String
    Description: The stack name where the Microsoft AD resides
    Default: corp-vpc-ad-sga

Resources:

  VPCPeer:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      PeerVpcId: !Join
                    - ''
                    - - Fn::ImportValue: !Sub ${ADStackName}-VPC
      VpcId: !Ref VPC

  EC2PeerRoute1:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Join
                    - ''
                    - - Fn::ImportValue: !Sub ${ADStackName}-PrivateRouteTable1
       DestinationCidrBlock: !FindInMap [ RegionSettings, !Ref 'AWS::Region', VpcCIDR]
       VpcPeeringConnectionId: !Ref VPCPeer

  EC2PeerRoute2:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Join
                    - ''
                    - - Fn::ImportValue: !Sub ${ADStackName}-PrivateRouteTable2
       DestinationCidrBlock: !FindInMap [ RegionSettings, !Ref 'AWS::Region', VpcCIDR]
       VpcPeeringConnectionId: !Ref VPCPeer

  EC2PeerPublicRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Join
                    - ''
                    - - Fn::ImportValue: !Sub ${ADStackName}-PublicRouteTable
       DestinationCidrBlock: !FindInMap [ RegionSettings, !Ref 'AWS::Region', VpcCIDR]
       VpcPeeringConnectionId: !Ref VPCPeer

  EC2Route1:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref PrivateRouteTable1
       DestinationCidrBlock: !Join
                    - ''
                    - - Fn::ImportValue: !Sub ${ADStackName}-VPCCidr
       VpcPeeringConnectionId: !Ref VPCPeer

  EC2Route2:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref PrivateRouteTable2
       DestinationCidrBlock: !Join
                    - ''
                    - - Fn::ImportValue: !Sub ${ADStackName}-VPCCidr
       VpcPeeringConnectionId: !Ref VPCPeer

  EC2FileShareRouteTCP1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: !FindInMap [ RegionSettings, !Ref 'AWS::Region', VpcCIDR]
      Description: Fileshare route from Workstation VPC
      GroupId: !Join
                - ''
                - - Fn::ImportValue: !Sub ${ADStackName}-EC2SecurityGroup
      IpProtocol: tcp
      FromPort: 135
      ToPort: 139

  EC2FileShareRouteUDP1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: !FindInMap [ RegionSettings, !Ref 'AWS::Region', VpcCIDR]
      Description: Fileshare route from Workstation VPC
      GroupId: !Join
                - ''
                - - Fn::ImportValue: !Sub ${ADStackName}-EC2SecurityGroup
      IpProtocol: udp
      FromPort: 135
      ToPort: 139

  EC2FileShareRouteTCP2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: !FindInMap [ RegionSettings, !Ref 'AWS::Region', VpcCIDR]
      Description: Fileshare route from Workstation VPC
      GroupId: !Join
                - ''
                - - Fn::ImportValue: !Sub ${ADStackName}-EC2SecurityGroup
      IpProtocol: tcp
      FromPort: 445
      ToPort: 445

  EC2FileShareRouteUDP2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: !FindInMap [ RegionSettings, !Ref 'AWS::Region', VpcCIDR]
      Description: Fileshare route from Workstation VPC
      GroupId: !Join
                - ''
                - - Fn::ImportValue: !Sub ${ADStackName}-EC2SecurityGroup
      IpProtocol: udp
      FromPort: 445
      ToPort: 445

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ RegionSettings, !Ref 'AWS::Region', VpcCIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [ RegionSettings, !Ref 'AWS::Region', AZ1]
      CidrBlock: !FindInMap [ RegionSettings, !Ref 'AWS::Region', PublicSubnet1CIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Public Subnet (AZ1)
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [ RegionSettings, !Ref 'AWS::Region', AZ2]
      CidrBlock: !FindInMap [ RegionSettings, !Ref 'AWS::Region', PublicSubnet2CIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Public Subnet (AZ2)
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [ RegionSettings, !Ref 'AWS::Region', AZ1]
      CidrBlock: !FindInMap [ RegionSettings, !Ref 'AWS::Region', PrivateSubnet1CIDR]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Private Subnet (AZ1)
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]


  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [ RegionSettings, !Ref 'AWS::Region', AZ2]
      CidrBlock: !FindInMap [ RegionSettings, !Ref 'AWS::Region', PrivateSubnet2CIDR]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Private Subnet (AZ2)
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Public Routes
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Private Routes (AZ1)
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Private Routes (AZ2)
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
