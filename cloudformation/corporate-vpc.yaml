Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets.


Mappings:
  RegionSettings:
    us-east-1:
      EnvironmentName: CorpInfrastructure
      VpcCIDR: 10.192.0.0/16
      PublicSubnet1CIDR: 10.192.10.0/24
      PublicSubnet2CIDR: 10.192.11.0/24
      PrivateSubnet1CIDR: 10.192.20.0/24
      PrivateSubnet2CIDR: 10.192.21.0/24
      AZ1: us-east-1a
      AZ2: us-east-1b
      AMI: ami-09d496c26aa745869
    us-west-2:
      EnvironmentName: CorpInfrastructure
      VpcCIDR: 10.194.0.0/16
      PublicSubnet1CIDR: 10.194.10.0/24
      PublicSubnet2CIDR: 10.194.11.0/24
      PrivateSubnet1CIDR: 10.194.20.0/24
      PrivateSubnet2CIDR: 10.194.21.0/24
      AZ1: us-west-2a
      AZ2: us-west-2b
      AMI: ami-0f467e652b07f3676

Parameters:
  ADName:
    Description: AD Name e.g. corp.company.com
    Type: String
    Default: corp.company.com
  ADAdminPassword:
    Description: AD Admin Password (8 to 64 characters with no 'admin', atleast 1 Uppercase, 1 symbol, 1 number and 1 Lowercase character)
    Type: String
    Default: Password1234!
  IspIpAddress:
    Description: The ISP IP Address of your machine to use for RDP - Google what is my ip address.
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ RegionSettings, !Ref 'AWS::Region', VpcCIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [ RegionSettings, !Ref 'AWS::Region', AZ1]
      CidrBlock: !FindInMap [ RegionSettings, !Ref 'AWS::Region', PublicSubnet1CIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Public Subnet (AZ1)
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [ RegionSettings, !Ref 'AWS::Region', AZ2]
      CidrBlock: !FindInMap [ RegionSettings, !Ref 'AWS::Region', PublicSubnet2CIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Public Subnet (AZ2)
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [ RegionSettings, !Ref 'AWS::Region', AZ1]
      CidrBlock: !FindInMap [ RegionSettings, !Ref 'AWS::Region', PrivateSubnet1CIDR]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Private Subnet (AZ1)
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]


  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [ RegionSettings, !Ref 'AWS::Region', AZ2]
      CidrBlock: !FindInMap [ RegionSettings, !Ref 'AWS::Region', PrivateSubnet2CIDR]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Private Subnet (AZ2)
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Public Routes
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Private Routes (AZ1)
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
                  - ${EnvironmentName} Private Routes (AZ2)
                  -
                    EnvironmentName: !FindInMap [ RegionSettings, !Ref 'AWS::Region', EnvironmentName]

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  MicrosoftAD:
    Type: AWS::DirectoryService::MicrosoftAD
    Properties:
      Name: !Ref ADName
      Password: !Ref ADAdminPassword
      VpcSettings:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        VpcId: !Ref VPC

  # SMB access for file share added in workspace-vpc.yaml
  SGA1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'cft-stack-${AWS::StackName}-securitygroup-a1'
      GroupDescription: This is the default security group for VPCAs public subnets
      GroupName: SGA1
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Sub '${IspIpAddress}/32'
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Sub '${IspIpAddress}/32'
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Sub '${IspIpAddress}/32'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: '-1'
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0

  EC2A:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [ RegionSettings, !Ref 'AWS::Region', AMI]
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2AINSTANCEPROFILE
      SsmAssociations:
        - DocumentName: !Ref SSMdocument
          AssociationParameters:
            - Key: directoryId
              Value:
                - !Ref MicrosoftAD
            - Key: directoryName
              Value:
                - !Ref ADName
            - Key: dnsIpAddresses
              Value: !GetAtt MicrosoftAD.DnsIpAddresses
      KeyName: !Ref 'AWS::StackName'
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              <powershell>
            - >
              Install-WindowsFeature -Name
              GPMC,RSAT-AD-PowerShell,RSAT-AD-AdminCenter,RSAT-ADDS-Tools,RSAT-DNS-Server
            - |
              </powershell>
            - |
              <persist>true</persist>
      Tags:
        - Key: Name
          Value: !Sub 'cft-stack-${AWS::StackName}-ec2-windows'
        - Key: Purpose
          Value: This is a Windows server attached to the managed Microsoft AD
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: 'true'
          GroupSet:
            - !Ref SGA1
          SubnetId: !Ref PublicSubnet1
    DependsOn:
      - LambdaInvoke
      - EC2AINSTANCEPROFILE

  ROLEEC2AAD:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ec2ssmpolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'ds:*'
                  - 'ssm:*'
                Effect: Allow
                Resource: '*'

  SSMdocument:
    Type: 'AWS::SSM::Document'
    Properties:
      Content:
        schemaVersion: '1.2'
        description: Join instances to an AWS Directory Service domain.
        parameters:
          directoryId:
            type: String
            description: (Required) The ID of the AWS Directory Service directory.
          directoryName:
            type: String
            description: >-
              (Required) The name of the directory; for example,
              test.example.com
          dnsIpAddresses:
            type: StringList
            default: []
            description: >-
              (Optional) The IP addresses of the DNS servers in the directory.
              Required when DHCP is not configured. Learn more at
              http://docs.aws.amazon.com/directoryservice/latest/simple-ad/join_get_dns_addresses.html
            allowedPattern: >-
              ((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)
          commands:
            type: StringList
            description: >-
              (Required) Specify the commands to run or the paths to existing
              scripts on the instance.
            minItems: 1
            displayType: textarea
            default:
              - >
                echo "Maybe add users here?"
          workingDirectory:
            type: String
            default: ''
            description: (Optional) The path to the working directory on your instance.
            maxChars: 4096
          executionTimeout:
            type: String
            default: '3600'
            description: >-
              (Optional) The time in seconds for a command to be completed
              before it is considered to have failed. Default is 3600 (1 hour).
              Maximum is 172800 (48 hours).
            allowedPattern: >-
              ([1-9][0-9]{0,4})|(1[0-6][0-9]{4})|(17[0-1][0-9]{3})|(172[0-7][0-9]{2})|(172800)
        runtimeConfig:
          'aws:domainJoin':
            properties:
              id: '0'
              directoryId: '{{ directoryId }}'
              directoryName: '{{ directoryName }}'
              dnsIpAddresses: '{{ dnsIpAddresses }}'
          'aws:runPowerShellScript':
            properties:
              - id: '1'
                runCommand: '{{ commands }}'
                workingDirectory: '{{ workingDirectory }}'
                timeoutSeconds: '{{ executionTimeout }}'

  EC2AINSTANCEPROFILE:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref ROLEEC2AAD

  KeyPairLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt
        - LambdaRole
        - Arn
      Runtime: python2.7
      Description: Test with Cloud Formation
      FunctionName: !Ref 'AWS::StackName'
      Timeout: 60
      Code:
        ZipFile: |-
          import json
          import logging
          import signal
          import boto3
          import os

          from urllib2 import build_opener, HTTPHandler, Request

          s3 = boto3.resource('s3')
          s3client = boto3.client('s3')
          ec2 = boto3.client('ec2')

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)


          def lambda_handler(event, context):
              keypairname = event['ResourceProperties']['KeyPairName']
              accountid = boto3.client('sts').get_caller_identity()['Account']
              region = os.environ['AWS_REGION']
              bucket = accountid+"-"+keypairname+"-"+region
              key = keypairname + ".pem"
              print key

              try:
                  LOGGER.info('REQUEST RECEIVED:\n %s', event)
                  LOGGER.info('REQUEST RECEIVED:\n %s', context)
                  if event['RequestType'] == 'Create':
                      LOGGER.info('CREATE!')
                      response = ec2.create_key_pair(KeyName=keypairname)
                      keymaterial = response['KeyMaterial']
                      if region == 'us-east-1':
                        s3.create_bucket(Bucket=bucket)
                      else:
                        s3.create_bucket(Bucket=bucket, CreateBucketConfiguration={'LocationConstraint': region})

                      s3client.put_bucket_encryption(Bucket=bucket, ServerSideEncryptionConfiguration={'Rules': [{ 'ApplyServerSideEncryptionByDefault': { 'SSEAlgorithm': 'aws:kms' }}]})
                      object = s3.Object(bucket, key)
                      object.put(Body=keymaterial)
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Resource creation successful!"})
                  elif event['RequestType'] == 'Update':
                      LOGGER.info('UPDATE!')
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Resource update successful!"})
                  elif event['RequestType'] == 'Delete':
                      LOGGER.info('DELETE!')
                      response = ec2.delete_key_pair(KeyName=keypairname)
                      object = s3.Object(bucket, key)
                      object.delete()
                      objectb = s3.Bucket(bucket)
                      objectb.delete()
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Resource deletion successful!"})
                  else:
                      LOGGER.info('FAILED!')
                      send_response(event, context, "FAILED",
                                    {"Message": "Unexpected event received from CloudFormation"})
              except Exception as e: #pylint: disable=W0702
                  LOGGER.info('FAILED!')
                  send_response(event, context, "FAILED", {
                      "Message": str(e)})


          def send_response(event, context, response_status, response_data):
              '''Send a resource manipulation status response to CloudFormation'''
              response_body = json.dumps({
                  "Status": response_status,
                  "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event['StackId'],
                  "RequestId": event['RequestId'],
                  "LogicalResourceId": event['LogicalResourceId'],
                  "Data": response_data
              })

              LOGGER.info('ResponseURL: %s', event['ResponseURL'])
              LOGGER.info('ResponseBody: %s', response_body)

              opener = build_opener(HTTPHandler)
              request = Request(event['ResponseURL'], data=response_body)
              request.add_header('Content-Type', '')
              request.add_header('Content-Length', len(response_body))
              request.get_method = lambda: 'PUT'
              response = opener.open(request)
              LOGGER.info("Status code: %s", response.getcode())
              LOGGER.info("Status message: %s", response.msg)

    DependsOn:
      - LambdaRole

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: lambdas3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
              - Effect: Allow
                Action: 'ec2:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'


  LambdaInvoke:
    Type: 'Custom::Invoker'
    Properties:
      Description: This is how you invoke the Lambda
      ServiceToken: !Sub >-
        arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}
      KeyPairName: !Ref 'AWS::StackName'
    DependsOn:
      - KeyPairLambda

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup

  VPCCidr:
    Description: The VPCCider used for VPC peering route tables
    Value: !FindInMap [ RegionSettings, !Ref 'AWS::Region', VpcCIDR]
    Export:
      Name: !Sub ${AWS::StackName}-VPCCidr

  PublicRouteTable:
    Description: Public Route Table Id to be used with VPC peering
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-PublicRouteTable

  PrivateRouteTable1:
    Description: Private Route Table Id to be used with VPC peering
    Value: !Ref PrivateRouteTable1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTable1

  PrivateRouteTable2:
    Description: Private Route Table Id to be used with VPC peering
    Value: !Ref PrivateRouteTable2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTable2

  EC2SecurityGroup:
    Description: EC2 Security Group
    Value: !Ref SGA1
    Export:
      Name: !Sub ${AWS::StackName}-EC2SecurityGroup
